// <auto-generated />
using System;
using DataManagment_311.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataManagment_311.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250205195012_Seeding2")]
    partial class Seeding2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Demo")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataManagment_311.EF.Entities.Basket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Baskets", "Demo");
                });

            modelBuilder.Entity("DataManagment_311.EF.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders", "Demo");
                });

            modelBuilder.Entity("DataManagment_311.EF.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CCost")
                        .HasColumnType("int");

                    b.Property<string>("Characteristics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Markup")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products", "Demo");
                });

            modelBuilder.Entity("DataManagment_311.EF.Entities.UserAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("UserAccesses", "Demo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dae2716d-610d-415d-9bf3-dd8f58ad8d95"),
                            Dk = "12345123",
                            Login = "user1",
                            RoleId = "guest",
                            Salt = "12345",
                            UserId = new Guid("d4e7f2a5-188c-48f5-9db6-6d8999ed5e42")
                        },
                        new
                        {
                            Id = new Guid("711f2d8f-2494-4272-a667-36886035e2c8"),
                            Dk = "12345123",
                            Login = "user1-m",
                            RoleId = "moderator",
                            Salt = "12345",
                            UserId = new Guid("d4e7f2a5-188c-48f5-9db6-6d8999ed5e42")
                        },
                        new
                        {
                            Id = new Guid("e50ad259-367f-4cb9-8f0c-d9c9a462dfe5"),
                            Dk = "12345123",
                            Login = "user2",
                            RoleId = "guest",
                            Salt = "12345",
                            UserId = new Guid("14b16781-27be-4fb4-804e-803c5a98e986")
                        },
                        new
                        {
                            Id = new Guid("16f5bbf5-226b-4796-abe2-87e6fbcb0c76"),
                            Dk = "12345123",
                            Login = "user3",
                            RoleId = "guest",
                            Salt = "12345",
                            UserId = new Guid("9cab7a6a-e970-44ae-8e73-58005dce3a01")
                        },
                        new
                        {
                            Id = new Guid("94e352b6-f348-42f6-a35a-8fcbef2d4b47"),
                            Dk = "12345123",
                            Login = "user4",
                            RoleId = "guest",
                            Salt = "12345",
                            UserId = new Guid("ecf36ceb-c0d5-4107-9e02-b43f8967038e")
                        },
                        new
                        {
                            Id = new Guid("37d22e1d-4c73-4418-99b6-7a496d00780f"),
                            Dk = "12345123",
                            Login = "user4-e",
                            RoleId = "editor",
                            Salt = "12345",
                            UserId = new Guid("ecf36ceb-c0d5-4107-9e02-b43f8967038e")
                        },
                        new
                        {
                            Id = new Guid("af04f9b1-3f7f-4705-8233-9ef271cf39ef"),
                            Dk = "12345123",
                            Login = "user5",
                            RoleId = "guest",
                            Salt = "12345",
                            UserId = new Guid("449a3602-c38b-45d8-a33b-76a88085aba2")
                        },
                        new
                        {
                            Id = new Guid("89754503-2fe6-4d63-8420-3503d6d857d6"),
                            Dk = "12345123",
                            Login = "user5-a",
                            RoleId = "admin",
                            Salt = "12345",
                            UserId = new Guid("449a3602-c38b-45d8-a33b-76a88085aba2")
                        },
                        new
                        {
                            Id = new Guid("75217169-694b-48ff-945b-7ba42d9d2d49"),
                            Dk = "12345123",
                            Login = "user7",
                            RoleId = "editor",
                            Salt = "12345",
                            UserId = new Guid("a1aad69c-8bb7-4119-b7fd-fb5e512f9625")
                        },
                        new
                        {
                            Id = new Guid("56c47e75-db11-46c5-8e65-8427b705f50a"),
                            Dk = "12345123",
                            Login = "user8",
                            RoleId = "editor",
                            Salt = "12345",
                            UserId = new Guid("1b6628fc-4b91-4b3b-a388-89db7c07a153")
                        },
                        new
                        {
                            Id = new Guid("b98990e0-667e-4eb0-9f22-86f4948c112e"),
                            Dk = "12345123",
                            Login = "user6",
                            RoleId = "editor",
                            Salt = "12345",
                            UserId = new Guid("20f46919-d7bf-477e-919a-4aaddd7e6852")
                        });
                });

            modelBuilder.Entity("DataManagment_311.EF.Entities.UserData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsersData", "Demo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4e7f2a5-188c-48f5-9db6-6d8999ed5e42"),
                            Email = "user1@i.ua",
                            Name = "Ivan",
                            Phone = "555-11-11"
                        },
                        new
                        {
                            Id = new Guid("14b16781-27be-4fb4-804e-803c5a98e986"),
                            Email = "user2@i.ua",
                            Name = "Sergey",
                            Phone = "555-11-22"
                        },
                        new
                        {
                            Id = new Guid("9cab7a6a-e970-44ae-8e73-58005dce3a01"),
                            Email = "user3@i.ua",
                            Name = "Ilona",
                            Phone = "555-11-33"
                        },
                        new
                        {
                            Id = new Guid("ecf36ceb-c0d5-4107-9e02-b43f8967038e"),
                            Email = "user4@i.ua",
                            Name = "Marina",
                            Phone = "555-11-44"
                        },
                        new
                        {
                            Id = new Guid("449a3602-c38b-45d8-a33b-76a88085aba2"),
                            Email = "user5@i.ua",
                            Name = "Stepan",
                            Phone = "555-11-55"
                        },
                        new
                        {
                            Id = new Guid("6a5aa914-d6c6-4a16-b9a1-87066a76b495"),
                            Email = "user6@i.ua",
                            Name = "Stephanie",
                            Phone = "333-11-55"
                        },
                        new
                        {
                            Id = new Guid("e1e681e0-3dee-41df-b67d-b5db908fa1f6"),
                            Email = "user7@i.ua",
                            Name = "Antonina",
                            Phone = "333-11-55"
                        },
                        new
                        {
                            Id = new Guid("a1aad69c-8bb7-4119-b7fd-fb5e512f9625"),
                            Email = "user8@i.ua",
                            Name = "Afanasy",
                            Phone = "222-11-55"
                        },
                        new
                        {
                            Id = new Guid("1b6628fc-4b91-4b3b-a388-89db7c07a153"),
                            Email = "user9@i.ua",
                            Name = "Nikolay",
                            Phone = "123-11-55"
                        },
                        new
                        {
                            Id = new Guid("20f46919-d7bf-477e-919a-4aaddd7e6852"),
                            Email = "user10@i.ua",
                            Name = "Valentine",
                            Phone = "234-11-55"
                        });
                });

            modelBuilder.Entity("DataManagment_311.EF.Entities.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CanCreate")
                        .HasColumnType("int");

                    b.Property<int>("CanDelete")
                        .HasColumnType("int");

                    b.Property<int>("CanRead")
                        .HasColumnType("int");

                    b.Property<int>("CanUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", "Demo");

                    b.HasData(
                        new
                        {
                            Id = "guest",
                            CanCreate = 0,
                            CanDelete = 0,
                            CanRead = 0,
                            CanUpdate = 0,
                            Description = "Self-registration of koristuvach"
                        },
                        new
                        {
                            Id = "editor",
                            CanCreate = 0,
                            CanDelete = 0,
                            CanRead = 1,
                            CanUpdate = 1,
                            Description = "With the right to edit content"
                        },
                        new
                        {
                            Id = "admin",
                            CanCreate = 1,
                            CanDelete = 1,
                            CanRead = 1,
                            CanUpdate = 1,
                            Description = "Database administrator"
                        },
                        new
                        {
                            Id = "moderator",
                            CanCreate = 0,
                            CanDelete = 1,
                            CanRead = 1,
                            CanUpdate = 0,
                            Description = "With the right to block content"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
